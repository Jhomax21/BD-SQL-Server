-- Comentarios con "--"

-- SQL DDL : DATA DEFINITION LANGUAGE
-- NOS PERMITE CREAR DISTINTOS OBJETOS EN SQL SERVER
-- NOS REFERIMOS OBJETOS A : BASE DE DATOS, TABLAS, RELACIONES, CONSTRAINTS, ETC.

-- Instrucción para poder crear una Base de Datos
-- CREATE DATABASE [NOMBRE_BD]

CREATE DATABASE BD_SEMANA06_2
GO

CREATE DATABASE MIERROR_BD
GO

-- Instrucción para borrar BD
-- DROP DATABASE [NOMBRE_BD]
-- NOTA: LA OPERACION ES IRREVERSIBLE

DROP DATABASE MIERROR_BD
GO

-- Instruccion para poder SELECCCIONAR la Base de Datos a Trabajar.
-- USE [NOMBRE_BD]

USE BD_SEMANA06_2
GO

-- Instruccion para CREAR una Tabla Simple
-- CREATE TABLE [NOMBRE_TABLA]

CREATE TABLE TB_FACTURA
(
	IDFACTURA INT,
	FECHA DATETIME,
	MONTO_FACTURA DECIMAL(10,2)
)
GO

-- Instrucción para ELIMINAR una Tabla.
-- DROP TABLE [NOMBRE_TABLA]

DROP TABLE TB_FACTURA
GO

-- Creando Tabla Tipo_Documento
-- Va a tener CLAVE PRIMARIA o PRIMARY KEY o CLAVE PRINCIPAL (PK)
-- El valor de la CLAVE PRIMARIA va a ser SECUENCIAL AUTOGENERADA 
-- Los valores de la PK se van a crear SOLOS.

-- idTipoDocumento y descripcionTipoDocumento SON COLUMNAS de la TABLA
-- INT y VARCHAR son Tipos de Datos de Cada Columna
-- PRIMARY KEY : PERMITE INDICAR QUE LA COLUMNA idTipoDocumento ES CLAVE PRIMARIA
-- IDENTITY : INDICA QUE EL VALOR DE ESA COLUMNA ES AUTOGENERADA

CREATE TABLE TIPO_DOCUMENTO
(
	idTipoDocumento INT PRIMARY KEY IDENTITY,
	descripcionTipoDocumento VARCHAR(30)
)
GO

-- CON REFERENCES ASOCIAMOS LA TABLA QUE ESTA RELACIONADA CON CLIENTE
-- INDICANDO ADEMAS QUE LA COLUMNA ES CLAVE FORANEA O FOREIGN KEY (FK)

CREATE TABLE CLIENTE
(
	idCliente INT PRIMARY KEY IDENTITY, -- ES UNA CLAVE PRIMARIA AUTOGENERADA
	apellidoPaternoCliente VARCHAR(50),
	apellidoMaternoCliente VARCHAR(50),
	nombreCliente VARCHAR(50),
	direccion VARCHAR(100),
	idTipoDocumento INT REFERENCES TIPO_DOCUMENTO, -- ES UNA CLAVE FORANEA
	numeroDocumento VARCHAR(11)
)
GO

CREATE TABLE CATEGORIA
(
	idCategoria INT PRIMARY KEY IDENTITY,
	nombreCategoria VARCHAR(35)
)
GO

CREATE TABLE PRODUCTO
(
	idProducto INT PRIMARY KEY IDENTITY,
	nombreProducto VARCHAR(50),
	precio DECIMAL(10,2),
	idCategoria INT REFERENCES CATEGORIA
)
GO

CREATE TABLE TABLE_DUMMY
(
	ID INT,
	NOMBRE CHAR(50)
)
GO

-- Instrucción para Eliminar una TABLA
-- DROP TABLE [NOMBRE_TABLA]

DROP TABLE TABLE_DUMMY
GO

-- Agregando, Modificando o Eliminando Columnas de una TABLA
-- MODIFICAR:
-- ALTER TABLE [NOMBRE_TABLA]
-- ALTER COLUMN [NOMBRE_COLUMNA] [TIPO_DATO]
-- AGREGAR:
-- ALTER TABLE [NOMBRE_TABLA]
-- ADD [NOMBRE_COLUMNA] [TIPO_DATO]
-- ELIMINAR:
-- ALTER TABLE [NOMBRE_TABLA]
-- DROP COLUMNA [NOMBRE_COLUMNA]

-- MODIFICAR COLUMNA 
ALTER TABLE PRODUCTO
ALTER COLUMN nombreProducto VARCHAR(70)
GO

-- AGREGAR COLUMNA
-- SE ESTA ADICIONANDO UNA COLUMNA MAS
-- DEFAULT ES UN CONSTRAINT QUE PERMITE ASIGNAR UN VALOR POR DEFECTO
-- A UNA COLUMNA
-- GETDATE() ES UNA FUNCION DE SQL QUE PERMITE OBTENER LA FECHA Y LA 
-- HORA DEL SISTEMA

ALTER TABLE PRODUCTO
ADD fechaRegistro DATETIME DEFAULT GETDATE()
GO

-- ELIMINAR COLUMNA
ALTER TABLE PRODUCTO
ADD estado CHAR(1)
GO

ALTER TABLE PRODUCTO
DROP COLUMN estado
GO

-- CONSTRAINTS SQL SERVER
-- CONSTRAINTS : RESTRICCIONES EN GENERAL
-- PRIMARY KEY, FOREIGN KEY, UNIQUE, CHECK, DEFAULT, NOT NULL

-- Para el Ejemplo:
-- El resultado debe almacenar unicamente 3 valores A(probado),
-- D(esaprobado), C(ondicionado)
-- fecha de la Evaluacion tiene que almacenar la fecha y la hora en la que
-- se genero la fila o registro (osea el momento en que se realizo la evaluación)
-- La columna codigo operacion NO puede repetirse

CREATE TABLE EVALUACION_CREDITICIA
(
	idEvaluacion INT PRIMARY KEY, -- Clave Primaria (PK)
	resultado CHAR(1),
	idCliente INT REFERENCES CLIENTE, -- Clave Foranea (FK)
	fechaEvaluacion DATETIME DEFAULT GETDATE(),
	codigoOperacion INT UNIQUE, -- Permite que el valor de la Columna NO se repita osea sea UNICA
	estado CHAR(1) NOT NULL, -- Indica que la columna siempre tenga un VALOR (osea que NO SEA NULA)
	CONSTRAINT chkResultado CHECK (resultado IN ('A','D','C'))
	-- Valida que la columna UNICAMENTE acepte valores A o D o C
)
GO

-- Supongamos que la tabla Evaluacion Crediticia tiene una Columna DNI
ALTER TABLE EVALUACION_CREDITICIA
ADD DNI CHAR(8)
GO

-- Validar que el DNI Acepte unicamente valores entre 0 y 9
ALTER TABLE EVALUACION_CREDITICIA
ADD CONSTRAINT REGLA_DNI CHECK ( DNI LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]')
GO

-- Supongamos que la tabla Evaluacion Crediticia tiene una Columna Nota
ALTER TABLE EVALUACION_CREDITICIA
ADD notaEvaluacion INT
GO

-- Validar que la Nota este entre 0 y 20
ALTER TABLE EVALUACION_CREDITICIA
ADD CONSTRAINT REGLA_NOTA CHECK (notaEvaluacion >= 0 AND notaEvaluacion <= 20)
GO

-- CLAVE PRIMARIA COMPUESTA.

CREATE TABLE CURSO
(
	idCurso INT PRIMARY KEY,
	nombreCurso VARCHAR(40),
	numeroCreditos INT
)
GO

CREATE TABLE PROFESION
(
	idProfesion INT PRIMARY KEY,
	nombreProfesion VARCHAR(30)
)
GO

CREATE TABLE DOCENTE
(
	idDocente INT PRIMARY KEY,
	nombre VARCHAR(25),
	apePaterno VARCHAR(25),
	apeMaterno VARCHAR(25),
	idProfesion INT REFERENCES PROFESION
)
GO

CREATE TABLE DICTADO_CURSO
(
	idCurso INT REFERENCES CURSO,
	idDocente INT REFERENCES DOCENTE,
	numeroVacantes INT,
	cicloAcademmico CHAR(6),
	PRIMARY KEY (idCurso, idDocente)
)
GO

-- SQL DML: DATA MANIPULATION LANGUAGE
-- NOS PERMITE REALIZAR OPERACIONES CRUD SOBRE UNA O MAS TABLAS
-- CRUD   : CREATE,   READ,      UPDATE,     DELETE
--  OP.SQL: INSERTAR, CONSULTAR, ACTUALIZAR, ELIMINAR
-- INS.SQL: INSERT,   SELECT,    UPDATE,     DELETE

-- INSTRUCCION INSERT
-- PERMITE GENERAR O INSERTAR FILAS O REGISTROS EN UNA TABLA
-- SINTAXIS : INSERT INTO [NOMBR_TABLA] 
--            VALUES (VALOR_COL1, VALOR_COL2,.... VALOR_COLN)

-- 1ra Forma de INSERTAR

INSERT INTO PROFESION VALUES (1, 'CONTADOR')
INSERT INTO PROFESION VALUES (2, 'ING. DE SOFTWARE')
INSERT INTO PROFESION VALUES (3, 'ING. DE SISTEMAS')
INSERT INTO PROFESION VALUES (4, 'MEDICO')
INSERT INTO PROFESION VALUES (5, 'ABOGADO')
INSERT INTO PROFESION VALUES (6, 'DOCENTE')
GO

-- PARA CONSULTAR UNA TABLA UTILIZAMOS LA INSTRUCCION SELECT
-- SELECT PERMITE SELECCIONAR O RECUPERAR UNAS FILAS O REGISTROS DE UNA TABLA
-- "*" ES UN COMODIN Y SIGNIFICA QUE ME MUESTRE TODAS LAS COLUMNAS DE LA TABLA

SELECT * FROM PROFESION
GO

INSERT INTO DOCENTE VALUES	(1, 'CARLOS', 'FLORES', 'SAAVEDRA', 1),
							(2, 'LUISA', 'DIAZ', 'CAMPOS', 3),
							(3, 'FEDERICO', 'BLAS', 'BALBOA', 4),
							(4, 'MARIA', 'GALVEZ', 'CHIPOCO', 2)
GO

SELECT * FROM DOCENTE
GO

INSERT INTO CURSO VALUES	(1, 'ESPECIFICACION Y ANALIS DE REQ.', 2),
							(2, 'IHC', 4),
							(3, 'PROGRAMACION EN WEB', 4),
							(4, 'CALCULO I', 3),
							(5, 'PLATAFORMAS CLOUD', 3),
							(6, 'ARQUITECTURA EMPRESARIAL', 2)
GO

SELECT * FROM CURSO
GO

INSERT INTO DICTADO_CURSO VALUES	(1, 1, 30, '202201'),
									(1, 4, 30, '202201'),
									(3, 2, 44, '202201')
GO

SELECT * FROM DICTADO_CURSO
GO

-- EJEMPLO DE SELECT CON JOIN (LO VEREMOS DESPUES DEL PARCIAL)
-- NO VIENE EN EX.PARCIAL ESTE EJEMPLO

SELECT	C.nombreCurso AS [NOMBRE DE CURSO],
		C.numeroCreditos AS [CANTIDAD DE CREDITOS],
		D.apePaterno + ' '+ D.apeMaterno + ', ' + D.nombre AS [NOMBRE COMPLETO DOCENTE],
		P.nombreProfesion AS [PROFESION]
FROM	DICTADO_CURSO DC
INNER JOIN
		CURSO C
ON		DC.idCurso = C.idCurso
INNER JOIN
		DOCENTE D 
ON		DC.idDocente = D.idDocente
INNER JOIN
		PROFESION P
ON		D.idProfesion = P.idProfesion
GO

-- INTRODUCCION AL USO DE LA INSTRUCCION SELECT
-- PERMITE SELECCIONAR O VISUALIZAR FILAS DE TABLAS
-- SELECT NOMBRE_COL1, NOMBRE_COL2, ... NOMBRE_COLN FROM [NOMBRE_TABLA]

SELECT * FROM CLIENTE
GO

SELECT idCliente, nombreCliente, numeroDocumento FROM CLIENTE
GO

-- COLOCANDO EN USA LA BD ATACHADA VENTASDEMO
USE VentasDemo
GO

SELECT * FROM Tb_Producto
GO

-- CLAUSULA TOP

SELECT TOP 2 * FROM Tb_Producto
GO

SELECT TOP 10 PERCENT * FROM Tb_Producto
GO

-- CLAUSULA ORDER BY
-- EL ORDENAMIENTO X DEFAULT ES ASCENDENTE
SELECT * FROM Tb_Producto ORDER BY Des_pro
GO
-- EL ORDENAMIENTO EN FORMA DESCENDENTE
SELECT * FROM Tb_Producto ORDER BY Des_pro DESC
GO
-- VARIANTE ES CONSIDERAR :
SELECT * FROM Tb_Producto ORDER BY 3 DESC
GO

-- CLAUSULA DISTINCT
SELECT DISTINCT UNI_MED FROM Tb_Producto
GO

-- CLAUSULA WHERE
-- OBTIENE PRODUCTOS IMPORTADOS
SELECT * FROM Tb_Producto WHERE Importado = 1
GO
-- OBTIENE PRODUCTOS CUYO STOCK ACTUAL ESTE ENTRE 1O y 100
SELECT * FROM Tb_Producto WHERE Stk_act BETWEEN 10 AND 100
GO
-- OBTIENE PRODUCTOS IMPORTADOS Y CUYA UNIDAD MEDIDA SEA DOC
SELECT * FROM Tb_Producto WHERE Importado = 1 AND Uni_med = 'Doc'
GO
-- OBTIENE TODOS LOS CLIENTES CUYO DISTRITO SEA IGUAL A D05 Y TIPO_CLIENTE = 2
SELECT * FROM Tb_Cliente WHERE Cod_dis = 'D05' AND TIP_CLI = 2
GO
-- OBTIENE TODOS LOS CLIENTES CUYO DISTRITO SEA IGUAL A D05 O TIPO_CLIENTE = 1
SELECT * FROM Tb_Cliente WHERE Cod_dis = 'D05' OR TIP_CLI = 1
GO



